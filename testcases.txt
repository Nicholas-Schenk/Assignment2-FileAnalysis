Case #1: Basic directory containing 2 text files where all data is entirely alphabetical(+spaces but not punctuation)  
Rationale: In the Asst2 writeup, we were provided an example working through the computation of the Jensen-Shannon Distance for two files and we decided to make our 2 files in this test case have the same token distribution as those. This is the most basic case that we will have to handle, and since we could easily verify that our code was accurate for this case, we chose it as our first test case.


Case #2: Basic Directory with more than 2 text files where all data is alphabetical and each text file has a different number of tokens
Rationale: The assignment specifies that we should print out the results in descending order based on the total number of tokens between the two files that we were comparing. By creating multiple different files and choosing the number of tokens in each file so that all distinct combinations had a different number of tokens, we knew that the output should always have a specific order. This allowed us to make sure that our program was correctly ordering the outputs. Also, this test case was the first which allowed us to be certain that our code correctly tested all distinct combinations of the files it found as with more than two files we could observe that we correctly had it iterate through all combinations.

Case #3: Directory containing multiple folders with each folder containing multiple files where the data is alphabetical.
Rationale: Tests to make sure that the program can handle entering directories and finding files within them. It also scales up the number of files we are working with to make sure that our program can handle a larger workload


Case #3: Complex directory structure containing multiple text files where all data is alphabetical.
Rationale: In order for our program to be useful, it must accurately be able to search through more complex directories than the first three cases.. Instead, the directory for this case contained subdirectories which contained subdirectories and so on. This allowed us to observe that the program successfully iterates through subdirectories until there are no more to iterate through. Some subdirectories contained both a text file and more subdirectories to make sure that the code did not ignore these text files or have any other error in handling that case.

Case #4: Complex directory structure with empty subdirectories and empty files.
Rationale: Another important feature of our program is its ability to handle subdirectories that contain no files for us to search through as well as files that contain no tokens for us to compare. Empty files also helped us guarantee that we are calculating the Jensen Shannon Distance correctly as they always result in the following: 1) If one file is empty and the other file is not empty the Jensen Shannon Distance between the two will always be 0.15015(with the way that we are calculating it in this assignment). 2) Two empty files compared to each other will always result in a Jensen Shannon Distance of 0 as they should both have 0 tokens and therefore distribution of their tokens is clearly equal. Since these files have a Jensen-Shannon Distance that is easy to confirm it is a very useful case.

Case #5: Comparing Essays in a complex directory structure.
Rationale: For this case, the size of the files that we were comparing has been drastically scaled up. We took multiple essays that had around 1000-3000 words with around 400-650 distinct words to try and push the program a harder in an effort to find any bugs that might occur with large workloads. It also allowed us to see that the code was efficient enough to finish these cases quickly. Finally, this was the first case where we introduced punctuation and new lines in the files. These are two key things that our program must deal with and testing on such large files helped confirm that it was consistently working correctly.

Case #5: There are no useable files in the directory
Rationale: If the directory does not have any useable files, we cannot calculate perform calculations on it and we must exit gracefully.

Case #6: There is only one useable file found in the directory
Rationale: Similar to Case#5 however this is handle inside the calculations portions of our program and therefore nis handled separately and warrants its own test.

Case #7: Directory given does not exist/ The users input is not a directory
Rationale: The program needs to gracefully handle when the user inputs a directory that does not exist.

Case #8: The user inputs either too many or too few arguments
Rationale: The program needs to gracefully handle when the users input is not useable.

Case #9: The file is entirely punctuation
Rationale: For the way that our program handles getting rid of punctuation the file being entirely punctuation required an extra step in error handling. Since the program is only supposed to care about alphabetic characters in calculations, if the file is entirely punctuation(non-alphabetic characters) then the program will treat it as an empty file.
